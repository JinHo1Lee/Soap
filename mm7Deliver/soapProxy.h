/* soapProxy.h
   Generated by gSOAP 2.8.4 from mm7.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapServiceProxy_H
#define soapServiceProxy_H
#include "soapH.h"
class Service
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'Service' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	Service()
	{ soap = soap_new(); endpoint = "http://localhost:80"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"mm7", "http://tempuri.org/mm7.xsd", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~Service() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'DeliverReq' of service 'Service' and return error code (or SOAP_OK)
	virtual int mm7__DeliverReq(char *MM7Version, char *MMSRelayServerID, char *Sender, char *Recipients, char *TimeStamp, char *Subject, char *Content, struct mm7__DeliverRsp *DeliverRsp) { return soap ? soap_call_mm7__DeliverReq(soap, endpoint, NULL, MM7Version, MMSRelayServerID, Sender, Recipients, TimeStamp, Subject, Content, DeliverRsp) : SOAP_EOM; };
};
#endif
